{"version":3,"sources":["components/creation-field/creation-field.jsx","components/active-task/active-task.jsx","components/active-tasks/active-tasks.jsx","components/completed-task/completed-task.jsx","components/completed-tasks/completed-tasks.jsx","components/assets/pin-1..jsx","components/assets/pin-2.jsx","components/todo-list/todo-list.jsx","App.js","serviceWorker.js","index.js"],"names":["CreationField","className","onChange","this","props","getInputValue","value","currentValue","onClick","createTask","React","Component","ActiveTask","setTaskValue","complete","activeTasks","ActiveTasks","map","task","key","CompletedTask","CompletedTasks","completedTasks","FirstPin","src","alt","SecondPin","TodoList","state","activeArray","completedArray","e","setState","target","completeTask","newArray","filter","item","setActiveTask","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"ibAiBeA,G,6LAZZ,OACC,yBAAKC,UAAU,kBACb,iDACA,yBAAKA,UAAU,6BACb,2BAAOA,UAAU,wBAAwBC,SAAUC,KAAKC,MAAMC,cAAeC,MAAOH,KAAKC,MAAMG,eAC/F,4BAAQN,UAAU,yBAAyBO,QAASL,KAAKC,MAAMK,YAA/D,a,GAPoBC,IAAMC,YCenBC,G,uNAdbC,aAAe,WACb,EAAKT,MAAMU,SAAS,EAAKV,MAAMW,c,wEAI/B,OACE,yBAAKd,UAAU,eACb,wBAAIA,UAAU,qBAAqBE,KAAKC,MAAMW,aAC9C,4BAAQd,UAAU,sBAAsBO,QAAYL,KAAKU,cAAzD,e,GATiBH,IAAMC,YCiBhBK,E,iLAfH,IAAD,OACP,OACE,yBAAKf,UAAU,gBACb,6CACA,wBAAIA,UAAU,sBAEZE,KAAKC,MAAMW,YACRE,KAAI,SAAAC,GAAI,OAAI,kBAAC,EAAD,CAAYH,YAAcG,EAAOC,IAAMD,EAAOJ,SAAa,EAAKV,MAAMU,oB,GARrEJ,IAAMC,WCWjBS,G,6LAVX,OACE,yBAAKnB,UAAU,kBACb,wBAAIA,UAAU,wBACVE,KAAKC,MAAMc,W,GALKR,IAAMC,YCiBnBU,E,iLAdX,OACE,yBAAKpB,UAAU,mBACb,+CACA,wBAAIA,UAAU,yBAEVE,KAAKC,MAAMkB,eACRL,KAAI,SAAAC,GAAI,OAAI,kBAAC,EAAD,CAAeA,KAAOA,EAAOC,IAAMD,a,GARjCR,IAAMC,WCSpBY,G,uLARX,OACE,yBAAKtB,UAAU,aACb,yBAAKA,UAAU,mBAAmBuB,IAAI,cAAcC,IAAI,a,GAJzCf,IAAMC,YCUde,G,uLARX,OACE,yBAAKzB,UAAU,cACb,yBAAKA,UAAU,oBAAoBuB,IAAI,cAAcC,IAAI,a,GAJzCf,IAAMC,YC0DfgB,E,2MApDbC,MAAQ,CACNrB,aAAe,GACfsB,YAAc,GACdC,eAAiB,I,EAGnBzB,cAAgB,SAAC0B,GACf,EAAKC,SAAU,CACbzB,aAAewB,EAAEE,OAAO3B,S,EAI5BG,WAAa,WACX,EAAKuB,SAAU,CACbH,YAAW,sBAAO,EAAKD,MAAMC,aAAlB,CAA+B,EAAKD,MAAMrB,eACrDA,aAAe,M,EAInB2B,aAAe,SAAC5B,GACd,IAAI6B,EAAW,EAAKP,MAAMC,YAAYO,QAAO,SAAAC,GAAI,OAAIA,IAAS/B,KAC9D,EAAK0B,SAAU,CACbH,YAAcM,EACdL,eAAc,sBAAO,EAAKF,MAAME,gBAAlB,CAAkCxB,O,wEAKlD,OACC,yBAAKL,UAAU,QACZ,yCACA,yBAAKA,UAAU,kBAAkBO,QAASL,KAAKmC,eAC7C,kBAAC,EAAD,CACE/B,aAAiBJ,KAAKyB,MAAMrB,aAC5BF,cAAkBF,KAAKE,cACvBI,WAAeN,KAAKM,aAEtB,kBAAC,EAAD,CACEM,YAAgBZ,KAAKyB,MAAMC,YAC3Bf,SAAaX,KAAK+B,eAEpB,kBAAC,EAAD,CACEZ,eAAkBnB,KAAKyB,MAAME,iBAE/B,kBAAC,EAAD,MACA,kBAAC,EAAD,Y,GA9CapB,IAAMC,WCEd4B,MANf,WACE,OACE,kBAAC,EAAD,OCMgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.48711a85.chunk.js","sourcesContent":["import React from 'react';\r\nimport './creation-field.scss';\r\n\r\nclass CreationField extends React.Component {\r\n render () {\r\n   return (\r\n    <div className='creation-field'>\r\n      <h3>Create new task :</h3>\r\n      <div className='creation-field__container'>\r\n        <input className='creation-field__input' onChange={this.props.getInputValue} value={this.props.currentValue}/>\r\n        <button className='creation-field__button' onClick={this.props.createTask}> + </button>\r\n      </div>\r\n    </div>\r\n   )\r\n }\r\n}\r\n\r\nexport default CreationField;","import React from 'react';\r\nimport './active-task.scss';\r\n\r\nclass ActiveTask extends React.Component {\r\n  setTaskValue = () => {\r\n    this.props.complete(this.props.activeTasks);\r\n  } \r\n\r\n  render () {\r\n    return (\r\n      <div className='active-task'>\r\n        <li className='active-task__item'>{this.props.activeTasks}</li>\r\n        <button className='active-task__button' onClick = { this.setTaskValue }>&#x2714;</button>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default ActiveTask;","import React from 'react';\r\nimport './active-tasks.scss';\r\nimport ActiveTask from '../active-task/active-task';\r\n\r\nclass ActiveTasks extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className='active-tasks'>\r\n        <h2>Tasks in work</h2>\r\n        <ul className='active-tasks__list'>\r\n          {\r\n          this.props.activeTasks\r\n            .map(task => <ActiveTask activeTasks={ task } key={ task } complete = { this.props.complete } /> ) \r\n          } \r\n        </ul>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default ActiveTasks;","import React from 'react';\r\nimport './completed-task.scss';\r\n\r\nclass CompletedTask extends React.Component {\r\n  render () {\r\n    return (\r\n      <div className='completed-task'>\r\n        <li className='completed-task__item'>\r\n          { this.props.task } \r\n        </li>\r\n      </div>\r\n    )\r\n  } \r\n}\r\n\r\nexport default CompletedTask;","import React from 'react';\r\nimport './completed-tasks.scss';\r\nimport CompletedTask from '../completed-task/completed-task';\r\n\r\nclass CompletedTasks extends React.Component {\r\n  render () {\r\n    return (\r\n      <div className='completed-tasks'>\r\n        <h2>Completed tasks</h2>\r\n        <ul className='completed-tasks__list'>\r\n          {\r\n            this.props.completedTasks\r\n              .map(task => <CompletedTask task={ task } key={ task } /> )\r\n          }\r\n        </ul>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default CompletedTasks;","import React from 'react';\r\nimport './pin-1.scss';\r\n\r\nclass FirstPin extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className='first-pin'>\r\n        <img className='first-pin__image' src='./pin-1.png' alt='pin'/>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default FirstPin;","import React from 'react';\r\nimport './pin-2.scss';\r\n\r\nclass SecondPin extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className='second-pin'>\r\n        <img className='second-pin__image' src='./pin-2.png' alt='pin'/>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default SecondPin;","import React from 'react';\r\nimport './todo-list.scss';\r\nimport CreationField from '../creation-field/creation-field';\r\nimport ActiveTasks from '../active-tasks/active-tasks';\r\nimport CompletedTasks from '../completed-tasks/completed-tasks';\r\nimport FirstPin from '../assets/pin-1.';\r\nimport SecondPin from '../assets/pin-2';\r\n\r\nclass TodoList extends React.Component {\r\n  state = {\r\n    currentValue : '',\r\n    activeArray : [],\r\n    completedArray : []\r\n  }\r\n\r\n  getInputValue = (e) => {\r\n    this.setState ({\r\n      currentValue : e.target.value\r\n    })\r\n  }\r\n\r\n  createTask = () => {\r\n    this.setState ({\r\n      activeArray : [...this.state.activeArray, this.state.currentValue],\r\n      currentValue : ''\r\n    });\r\n  }\r\n\r\n  completeTask = (value) => {\r\n    let newArray = this.state.activeArray.filter(item => item !== value);\r\n    this.setState ({\r\n      activeArray : newArray,\r\n      completedArray : [...this.state.completedArray, value]\r\n    })\r\n  }\r\n\r\n  render () {\r\n    return (\r\n     <div className='todo'>\r\n        <h1>ToDo LIST</h1>\r\n        <div className='todo__container' onClick={this.setActiveTask}>\r\n          <CreationField \r\n            currentValue = { this.state.currentValue }\r\n            getInputValue = { this.getInputValue } \r\n            createTask = { this.createTask }\r\n          />\r\n          <ActiveTasks \r\n            activeTasks = { this.state.activeArray }\r\n            complete = { this.completeTask }\r\n          />\r\n          <CompletedTasks \r\n            completedTasks = {this.state.completedArray}\r\n          />\r\n          <FirstPin />\r\n          <SecondPin />\r\n        </div>\r\n     </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default TodoList;","import React from 'react';\nimport './App.css';\nimport TodoList from './components/todo-list/todo-list'\n\nfunction App() {\n  return (\n    <TodoList />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}